# Chennai Traffic Impact Calculator - React + Express Implementation

Build a comprehensive React web app with Express.js backend that calculates how much a user's commute contributes to Chennai traffic, provides alternatives, and achieves 60%+ completion rates through optimized UX design.

## Project Overview & Goals

**Primary Goal**: Help Chennai commuters understand their traffic impact and discover better alternatives
**Success Metrics**: 60% completion rate, <3 seconds load time, <$50/month API costs
**Target Users**: Chennai residents aged 18-70 with any transport mode
**Tech Stack**: React (CRA) + Express.js + PostgreSQL + Redis

## Project Structure & Setup

### Initial Setup Commands
```bash
# Create React app
npx create-react-app chennai-traffic-calculator --template typescript
cd chennai-traffic-calculator

# Install frontend dependencies
npm install @googlemaps/js-api-loader lucide-react
npm install react-hook-form @hookform/resolvers zod
npm install recharts axios
npm install @types/google.maps

# Install backend dependencies (in server folder)
npm install express cors helmet morgan compression
npm install pg redis ioredis express-rate-limit
npm install @supabase/supabase-js
npm install dotenv nodemailer
npm install @types/express @types/cors @types/pg
```

### Project Directory Structure
```
src/
├── components/
│   ├── calculator/
│   │   ├── CalculatorFlow.tsx
│   │   ├── StepIndicator.tsx
│   │   ├── steps/
│   │   │   ├── TransportationStep.tsx
│   │   │   ├── RouteStep.tsx
│   │   │   └── ResultsStep.tsx
│   │   ├── VehicleSelector.tsx
│   │   ├── GoogleMapsAutocomplete.tsx
│   │   ├── ImpactScoreDisplay.tsx
│   │   ├── AlternativesList.tsx
│   │   └── DynamicBackground.tsx
│   ├── ui/
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   ├── Card.tsx
│   │   └── Modal.tsx
│   ├── layout/
│   │   ├── Header.tsx
│   │   ├── Footer.tsx
│   │   └── LanguageToggle.tsx
│   └── analytics/
│       └── Analytics.tsx
├── hooks/
│   ├── useLocalStorage.ts
│   ├── useAnalytics.ts
│   └── useFormPersist.ts
├── lib/
│   ├── api.ts
│   ├── validation.ts
│   ├── analytics.ts
│   ├── constants.ts
│   └── utils.ts
├── types/
│   └── index.ts
├── styles/
│   ├── index.css
│   └── calculator.css
└── App.tsx

server/
├── routes/
│   ├── calculate.js
│   ├── vehicles.js
│   ├── routes.js
│   ├── alternatives.js
│   └── health.js
├── services/
│   ├── impactCalculator.js
│   ├── routingService.js
│   ├── cacheManager.js
│   └── analytics.js
├── middleware/
│   ├── auth.js
│   ├── rateLimit.js
│   ├── cors.js
│   └── validation.js
├── models/
│   ├── database.js
│   └── queries.js
├── config/
│   ├── database.js
│   ├── redis.js
│   └── maps.js
└── server.js
```

## Frontend Implementation (React)

### 1. Main App Component with Routing
```tsx
// src/App.tsx
import React, { useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Header } from './components/layout/Header';
import { Footer } from './components/layout/Footer';
import { CalculatorFlow } from './components/calculator/CalculatorFlow';
import { MethodologyPage } from './components/pages/MethodologyPage';
import { DynamicBackground } from './components/calculator/DynamicBackground';
import { Analytics } from './components/analytics/Analytics';
import { LanguageProvider } from './contexts/LanguageContext';
import './styles/index.css';

function App() {
  useEffect(() => {
    // SEO: Dynamic page titles
    document.title = 'Chennai Traffic Impact Calculator';
    
    // SEO: Meta descriptions
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute('content', 
        'Calculate how your commute affects Chennai traffic. Get personalized suggestions for better alternatives.'
      );
    }
  }, []);

  return (
    <LanguageProvider>
      <Router>
        <DynamicBackground>
          <div className="min-h-screen flex flex-col">
            <Header />
            
            <main className="flex-1">
              <Routes>
                <Route path="/" element={<LandingPage />} />
                <Route path="/calculator" element={<CalculatorFlow />} />
                <Route path="/methodology" element={<MethodologyPage />} />
                <Route path="/about" element={<AboutPage />} />
              </Routes>
            </main>
            
            <Footer />
          </div>
        </DynamicBackground>
        <Analytics />
      </Router>
    </LanguageProvider>
  );
}

export default App;
```

### 2. API Client Layer
```typescript
// src/lib/api.ts
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for tracking
apiClient.interceptors.request.use((config) => {
  config.metadata = { startTime: Date.now() };
  return config;
});

// Response interceptor for analytics
apiClient.interceptors.response.use(
  (response) => {
    const duration = Date.now() - response.config.metadata.startTime;
    console.log(`API call took ${duration}ms`);
    return response;
  },
  (error) => {
    console.error('API Error:', error.response?.data || error.message);
    return Promise.reject(error);
  }
);

export interface CalculationInput {
  transportMode: string;
  vehicleType?: string;
  occupancy?: number;
  origin: string;
  destination: string;
  timing: string;
  frequency: string;
}

export interface CalculationResult {
  score: number;
  confidence: {
    level: 'A' | 'B' | 'C';
    description: string;
  };
  breakdown: {
    vehicleImpact: number;
    routeCongestion: number;
    timingPenalty: number;
    locationWeight: number;
  };
  equivalentCommuters: number;
  monthlySavings: number;
  alternatives: Alternative[];
  methodology: string;
  disclaimer?: string;
}

export interface Alternative {
  type: string;
  title: string;
  description: string;
  impactReduction: number;
  timeDelta: string;
  costSavings: number;
}

export const api = {
  // Calculate traffic impact
  calculateImpact: (input: CalculationInput): Promise<CalculationResult> =>
    apiClient.post('/calculate-impact', input).then(res => res.data),

  // Get available vehicles
  getVehicles: () =>
    apiClient.get('/vehicles').then(res => res.data),

  // Get route alternatives
  getAlternatives: (input: any) =>
    apiClient.post('/alternatives', input).then(res => res.data),

  // Submit feedback
  submitFeedback: (feedback: any) =>
    apiClient.post('/feedback', feedback).then(res => res.data),

  // Health check
  healthCheck: () =>
    apiClient.get('/health').then(res => res.data),
};
```

### 3. Calculator Flow Component
```tsx
// src/components/calculator/CalculatorFlow.tsx
import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { StepIndicator } from './StepIndicator';
import { TransportationStep } from './steps/TransportationStep';
import { RouteStep } from './steps/RouteStep';
import { ResultsStep } from './steps/ResultsStep';
import { calculatorSchema, type CalculatorInput } from '../../lib/validation';
import { api, type CalculationResult } from '../../lib/api';
import { trackEvent } from '../../lib/analytics';
import { useFormPersist } from '../../hooks/useFormPersist';

const TOTAL_STEPS = 3;

export function CalculatorFlow() {
  const [currentStep, setCurrentStep] = useState(1);
  const [results, setResults] = useState<CalculationResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<CalculatorInput>({
    resolver: zodResolver(calculatorSchema),
    mode: 'onChange',
    defaultValues: {
      transportMode: '',
      origin: '',
      destination: '',
      timing: '',
      frequency: '',
      occupancy: 1,
    },
  });

  // Auto-save form progress
  useFormPersist('calculatorProgress', form.watch, form.setValue);

  const { register, handleSubmit, watch, setValue, formState: { errors, isValid } } = form;

  const nextStep = () => {
    if (currentStep < TOTAL_STEPS) {
      setCurrentStep(currentStep + 1);
      trackEvent('step_completed', { 
        step: currentStep,
        transport_mode: watch('transportMode')
      });
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const onSubmit = async (data: CalculationInput) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const result = await api.calculateImpact(data);
      setResults(result);
      setCurrentStep(3);
      
      // Save route for future use
      localStorage.setItem('lastRoute', JSON.stringify({
        origin: data.origin,
        destination: data.destination,
        expires: Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 days
      }));
      
      trackEvent('calculation_completed', {
        transport_mode: data.transportMode,
        vehicle_category: data.vehicleType,
        impact_score: result.score,
        calculation_time_ms: Date.now(),
      });
      
    } catch (error: any) {
      console.error('Calculation failed:', error);
      setError(error.response?.data?.error || 'Failed to calculate impact. Please try again.');
      trackEvent('calculation_error', { 
        error: error.message,
        step: currentStep
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Progress Indicator */}
      <StepIndicator currentStep={currentStep} totalSteps={TOTAL_STEPS} />
      
      {/* Error Display */}
      {error && (
        <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center">
            <div className="w-6 h-6 text-red-600 mr-2">⚠️</div>
            <div className="text-red-800">{error}</div>
          </div>
          <button 
            onClick={() => setError(null)}
            className="mt-2 text-sm text-red-600 hover:text-red-800"
          >
            Dismiss
          </button>
        </div>
      )}
      
      {/* Main Form */}
      <form onSubmit={handleSubmit(onSubmit)} className="mt-8">
        <div className="bg-white rounded-xl shadow-lg p-6 md:p-8 transition-all duration-300">
          {currentStep === 1 && (
            <TransportationStep 
              register={register}
              errors={errors}
              watch={watch}
              setValue={setValue}
              onNext={nextStep}
            />
          )}
          
          {currentStep === 2 && (
            <RouteStep 
              register={register}
              errors={errors}
              watch={watch}
              setValue={setValue}
              onNext={nextStep}
              onPrev={prevStep}
              isLoading={isLoading}
            />
          )}
          
          {currentStep === 3 && results && (
            <ResultsStep 
              results={results}
              onRestart={() => {
                setCurrentStep(1);
                setResults(null);
                setError(null);
                sessionStorage.removeItem('calculatorProgress');
                form.reset();
              }}
            />
          )}
        </div>
      </form>

      {/* Completion Rate Optimization */}
      <div className="mt-6 text-center">
        <div className="inline-flex items-center px-4 py-2 bg-blue-50 rounded-full text-sm text-blue-700">
          <span className="w-2 h-2 bg-blue-500 rounded-full mr-2 animate-pulse"></span>
          {currentStep === 1 && "Choose your transport mode to get started"}
          {currentStep === 2 && "Enter your route details - almost there!"}
          {currentStep === 3 && "See your impact and discover better options"}
        </div>
      </div>
    </div>
  );
}
```

### 4. Dynamic Background Component
```tsx
// src/components/calculator/DynamicBackground.tsx
import React, { useEffect, useState } from 'react';

interface DynamicBackgroundProps {
  impactScore?: number;
  children: React.ReactNode;
}

export function DynamicBackground({ impactScore, children }: DynamicBackgroundProps) {
  const [backgroundClass, setBackgroundClass] = useState('bg-gradient-to-br from-blue-50 to-orange-50');

  useEffect(() => {
    if (impactScore !== undefined) {
      const bgClass = getBackgroundForScore(impactScore);
      setBackgroundClass(bgClass);
    }
  }, [impactScore]);

  function getBackgroundForScore(score: number): string {
    if (score <= 2) {
      return 'bg-gradient-to-br from-green-50 to-emerald-100 transition-all duration-1000';
    } else if (score <= 4) {
      return 'bg-gradient-to-br from-green-50 to-lime-50 transition-all duration-1000';
    } else if (score <= 6) {
      return 'bg-gradient-to-br from-gray-50 to-slate-50 transition-all duration-1000';
    } else if (score <= 8) {
      return 'bg-gradient-to-br from-orange-50 to-amber-100 transition-all duration-1000';
    } else {
      return 'bg-gradient-to-br from-red-50 to-rose-100 transition-all duration-1000';
    }
  }

  return (
    <div className={`min-h-screen ${backgroundClass}`}>
      {children}
    </div>
  );
}
```

### 5. Transportation Step Component
```tsx
// src/components/calculator/steps/TransportationStep.tsx
import React, { useState, useEffect } from 'react';
import { Car, Bus, Bike, Search } from 'lucide-react';
import { api } from '../../../lib/api';
import { trackEvent } from '../../../lib/analytics';

interface TransportationStepProps {
  register: any;
  errors: any;
  watch: any;
  setValue: any;
  onNext: () => void;
}

export function TransportationStep({ register, errors, watch, setValue, onNext }: TransportationStepProps) {
  const [vehicles, setVehicles] = useState([]);
  const [selectedVehicle, setSelectedVehicle] = useState<any>(null);
  const [isLoadingVehicles, setIsLoadingVehicles] = useState(false);
  
  const transportMode = watch('transportMode');
  const vehicleType = watch('vehicleType');
  const occupancy = watch('occupancy');

  // Load vehicles when component mounts
  useEffect(() => {
    loadVehicles();
  }, []);

  const loadVehicles = async () => {
    setIsLoadingVehicles(true);
    try {
      const vehicleData = await api.getVehicles();
      setVehicles(vehicleData);
    } catch (error) {
      console.error('Failed to load vehicles:', error);
    } finally {
      setIsLoadingVehicles(false);
    }
  };

  const transportOptions = [
    {
      id: 'personal',
      label: 'Personal Vehicle',
      icon: Car,
      description: 'Car, motorcycle, or other private transport',
      emoji: '🚗',
    },
    {
      id: 'public',
      label: 'Public Transport',
      icon: Bus,
      description: 'Bus, metro, auto-rickshaw, or shared transport',
      emoji: '🚌',
    },
    {
      id: 'active',
      label: 'Walking/Cycling',
      icon: Bike,
      description: 'Walking, cycling, or other active transport',
      emoji: '🚶‍♀️',
    },
    {
      id: 'exploring',
      label: 'Exploring Options',
      icon: Search,
      description: 'Compare different transport modes',
      emoji: '🔍',
    },
  ];

  const canProceed = transportMode && (
    transportMode !== 'personal' || (vehicleType && occupancy)
  );

  const handleTransportModeChange = (mode: string) => {
    setValue('transportMode', mode);
    
    // Reset vehicle selection when changing transport mode
    if (mode !== 'personal') {
      setValue('vehicleType', '');
      setValue('occupancy', 1);
      setSelectedVehicle(null);
    }
    
    trackEvent('transport_mode_selected', { mode });
  };

  const handleVehicleSelect = (vehicle: any) => {
    setSelectedVehicle(vehicle);
    setValue('vehicleType', vehicle.id);
    setValue('occupancy', 1); // Reset occupancy when vehicle changes
    
    trackEvent('vehicle_selected', { 
      make: vehicle.make, 
      model: vehicle.model,
      category: vehicle.category 
    });
  };

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">
          How do you usually commute?
        </h2>
        <p className="text-lg text-gray-600">
          Select your primary mode of transportation in Chennai
        </p>
      </div>

      {/* Transport Mode Selection */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {transportOptions.map((option) => {
          const Icon = option.icon;
          const isSelected = transportMode === option.id;
          
          return (
            <button
              key={option.id}
              type="button"
              onClick={() => handleTransportModeChange(option.id)}
              className={`
                relative flex items-start p-6 rounded-xl border-2 transition-all duration-200 
                hover:shadow-lg transform hover:scale-[1.02] text-left
                ${isSelected 
                  ? 'border-blue-500 bg-blue-50 shadow-lg ring-2 ring-blue-200' 
                  : 'border-gray-200 bg-white hover:border-gray-300'
                }
              `}
            >
              <div className="text-3xl mr-4">{option.emoji}</div>
              
              <div className="flex-1">
                <h3 className={`font-semibold text-lg ${isSelected ? 'text-blue-700' : 'text-gray-900'}`}>
                  {option.label}
                </h3>
                <p className="text-gray-600 mt-1">
                  {option.description}
                </p>
              </div>
              
              {isSelected && (
                <div className="absolute top-4 right-4">
                  <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                    <div className="w-3 h-3 bg-white rounded-full"></div>
                  </div>
                </div>
              )}
            </button>
          );
        })}
      </div>

      {/* Vehicle Selection for Personal Transport */}
      {transportMode === 'personal' && (
        <div className="space-y-6 p-6 bg-gray-50 rounded-xl">
          <h3 className="text-xl font-semibold text-gray-900">
            Select your vehicle
          </h3>
          
          {isLoadingVehicles ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
              <span className="ml-3 text-gray-600">Loading vehicles...</span>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {vehicles.map((vehicle: any) => (
                <button
                  key={vehicle.id}
                  type="button"
                  onClick={() => handleVehicleSelect(vehicle)}
                  className={`
                    p-4 rounded-lg border text-left transition-all duration-200
                    hover:shadow-md
                    ${selectedVehicle?.id === vehicle.id
                      ? 'border-blue-500 bg-blue-50 shadow-md'
                      : 'border-gray-200 bg-white hover:border-gray-300'
                    }
                  `}
                >
                  <div className="font-medium text-gray-900">
                    {vehicle.make} {vehicle.model}
                  </div>
                  <div className="text-sm text-gray-500 mt-1">
                    {vehicle.category.charAt(0).toUpperCase() + vehicle.category.slice(1)}
                  </div>
                </button>
              ))}
            </div>
          )}
          
          {/* Occupancy Selector */}
          {selectedVehicle && (
            <div className="mt-6">
              <label className="block text-sm font-medium text-gray-700 mb-3">
                How many people typically travel in your vehicle?
              </label>
              <div className="flex space-x-2">
                {[1, 2, 3, 4, 5, 6, 7, 8].slice(0, selectedVehicle.max_occupancy || 5).map((num) => (
                  <button
                    key={num}
                    type="button"
                    onClick={() => setValue('occupancy', num)}
                    className={`
                      w-12 h-12 rounded-lg border font-medium transition-all duration-200
                      ${occupancy === num
                        ? 'border-blue-500 bg-blue-500 text-white'
                        : 'border-gray-300 bg-white text-gray-700 hover:border-gray-400'
                      }
                    `}
                  >
                    {num}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Encouragement for sustainable transport */}
      {(transportMode === 'public' || transportMode === 'active') && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-6">
          <div className="flex items-start">
            <div className="text-2xl mr-3">🌟</div>
            <div>
              <h4 className="font-medium text-green-900 text-lg">Excellent choice!</h4>
              <p className="text-green-700 mt-1">
                {transportMode === 'public' 
                  ? "Public transport is one of the most efficient ways to reduce traffic impact. We'll show you the best routes and connections for your journey."
                  : "Active transport has minimal traffic impact and great health benefits! We'll help you find the safest and most convenient routes."
                }
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Next Button */}
      <div className="flex justify-end pt-6">
        <button
          type="button"
          onClick={onNext}
          disabled={!canProceed}
          className={`
            px-8 py-3 rounded-lg font-medium transition-all duration-200 text-lg
            ${canProceed
              ? 'bg-blue-600 text-white hover:bg-blue-700 shadow-lg hover:shadow-xl transform hover:scale-105'
              : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }
          `}
        >
          Next: Enter Route →
        </button>
      </div>

      {/* Progress indicator */}
      <div className="text-center text-sm text-gray-500">
        Step 1 of 3 • This will take about 2 minutes ⏱️
      </div>
    </div>
  );
}
```

## Backend Implementation (Express.js)

### 6. Express Server Setup
```javascript
// server/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

// Import routes
const calculateRoutes = require('./routes/calculate');
const vehicleRoutes = require('./routes/vehicles');
const routeRoutes = require('./routes/routes');
const alternativeRoutes = require('./routes/alternatives');
const healthRoutes = require('./routes/health');

// Import middleware
const { corsConfig } = require('./middleware/cors');
const { validateRequest } = require('./middleware/validation');

const app = express();
const PORT = process.env.PORT || 5000;

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "*.googleapis.com", "*.googletagmanager.com"],
      styleSrc: ["'self'", "'unsafe-inline'", "fonts.googleapis.com"],
      fontSrc: ["'self'", "fonts.gstatic.com"],
      imgSrc: ["'self'", "blob:", "data:", "*.googleapis.com", "*.gstatic.com"],
      connectSrc: ["'self'", "*.googleapis.com", "*.supabase.co", "*.upstash.io"],
    },
  },
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: {
    error: 'Too many requests from this IP, please try again later.',
  },
  standardHeaders: true,
  legacyHeaders: false,
});

app.use(limiter);

// Basic middleware
app.use(compression());
app.use(cors(corsConfig));
app.use(morgan('combined'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// API routes
app.use('/api/calculate-impact', calculateRoutes);
app.use('/api/vehicles', vehicleRoutes);
app.use('/api/routes', routeRoutes);
app.use('/api/alternatives', alternativeRoutes);
app.use('/api/health', healthRoutes);

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static('build'));
  
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../build', 'index.html'));
  });
}

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  
  res.status(err.status || 500).json({
    error: process.env.NODE_ENV === 'production' 
      ? 'Internal server error' 
      : err.message,
    timestamp: new Date().toISOString(),
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`🗄️ Database: ${process.env.SUPABASE_URL ? 'Connected' : 'Not configured'}`);
});

module.exports = app;
```

### 7. Impact Calculation Service
```javascript
// server/services/impactCalculator.js
const { supabase } = require('../config/database');
const { redis } = require('../config/redis');
const { routingService } = require('./routingService');

class ImpactCalculator {
  async calculate(input) {
    try {
      // Handle non-personal transport modes
      if (input.transportMode !== 'personal') {
        return await this.calculateNonPersonalTransport(input);
      }

      // Get vehicle PCU data
      const vehiclePCU = await this.getVehiclePCU(input.vehicleType);
      
      // Get route data with caching
      const routeData = await this.getRouteData(input.origin, input.destination);
      
      // Calculate impact components
      const breakdown = await this.calculateBreakdown(
        vehiclePCU,
        routeData,
        input.occupancy,
        input.timing,
        input.frequency
      );

      // Generate final score
      const score = this.generateScore(breakdown);
      
      // Get alternatives
      const alternatives = await this.generateAlternatives(input, score);
      
      // Get comparison data
      const equivalentCommuters = await this.getEquivalentCommuters(score);
      const monthlySavings = await this.calculatePotentialSavings(input, alternatives);

      return {
        score: Math.round(score * 10) / 10, // Round to 1 decimal
        confidence: routeData.confidence,
        breakdown,
        equivalentCommuters,
        monthlySavings,
        alternatives,
        methodology: `Based on PCU v${await this.getCurrentPCUVersion()} and corridor capacity`,
        disclaimer: routeData.disclaimer,
        calculatedAt: new Date().toISOString(),
      };

    } catch (error) {
      console.error('Impact calculation failed:', error);
      throw new Error('Unable to calculate traffic impact. Please try again.');
    }
  }

  async calculateNonPersonalTransport(input) {
    const baseScore = input.transportMode === 'public' ? 1.5 : 
                     input.transportMode === 'active' ? 0.8 : 1.0;
    
    return {
      score: baseScore,
      confidence: { level: 'A', description: 'High confidence for sustainable transport' },
      breakdown: {
        vehicleImpact: 0.1,
        routeCongestion: 1.0,
        timingPenalty: 1.0,
        locationWeight: 1.0,
      },
      equivalentCommuters: await this.getPublicTransportEquivalent(),
      monthlySavings: await this.getPublicTransportSavings(input),
      alternatives: await this.generatePublicTransportAlternatives(input),
      methodology: 'Sustainable transport modes have minimal traffic impact',
      calculatedAt: new Date().toISOString(),
    };
  }

  async getVehiclePCU(vehicleType) {
    const cacheKey = `pcu:${vehicleType}`;
    const cached = await redis.get(cacheKey);
    
    if (cached) {
      return JSON.parse(cached);
    }

    const { data, error } = await supabase
      .from('vehicles')
      .select(`
        category,
        vehicle_pcu_v202501!inner(
          pcu_value,
          max_occupancy,
          lane_behavior
        )
      `)
      .eq('id', vehicleType)
      .single();

    if (error) {
      throw new Error(`Vehicle data not found: ${vehicleType}`);
    }

    const result = {
      category: data.category,
      pcu: data.vehicle_pcu_v202501.pcu_value,
      maxOccupancy: data.vehicle_pcu_v202501.max_occupancy,
      laneBehavior: data.vehicle_pcu_v202501.lane_behavior,
    };

    // Cache for 24 hours
    await redis.setex(cacheKey, 86400, JSON.stringify(result));
    
    return result;
  }

  async getRouteData(origin, destination) {
    const routeHash = this.hashRoute(origin, destination);
    
    // Check cache first
    const { data: cached } = await supabase
      .from('route_cache')
      .select('*')
      .eq('route_hash', routeHash)
      .gt('expires_at', new Date().toISOString())
      .single();

    if (cached) {
      return {
        distance: cached.distance_km,
        duration: cached.duration_minutes,
        congestionFactor: cached.congestion_factor,
        cbdRatio: cached.cbd_ratio,
        confidence: this.getConfidenceFromCache(cached),
        disclaimer: cached.data_source === 'osm' ? 'Route calculated using fallback data - accuracy may be reduced' : undefined,
      };
    }

    // Fetch from Google Maps API with fallback to OSM
    const routeData = await routingService.getRoute(origin, destination);
    
    // Cache the result
    await this.cacheRouteData(routeHash, origin, destination, routeData);
    
    return routeData;
  }

  async calculateBreakdown(vehiclePCU, routeData, occupancy, timing, frequency) {
    // Vehicle impact (PCU per passenger)
    const vehicleImpact = vehiclePCU.pcu / Math.max(occupancy, 1);
    
    // Route congestion factor
    const routeCongestion = routeData.congestionFactor || 1.0;
    
    // Peak hour timing penalty
    const timingPenalty = this.getPeakHourMultiplier(timing);
    
    // Location weight (CBD vs suburban)
    const locationWeight = 1.0 + (routeData.cbdRatio * 1.5);
    
    // Frequency adjustment
    const frequencyMultiplier = frequency === 'daily' ? 1.0 : 
                               frequency === 'weekly' ? 0.7 : 0.4;

    return {
      vehicleImpact: vehicleImpact * frequencyMultiplier,
      routeCongestion,
      timingPenalty,
      locationWeight,
    };
  }

  generateScore(breakdown) {
    const rawScore = breakdown.vehicleImpact * 
                    breakdown.routeCongestion * 
                    breakdown.timingPenalty * 
                    breakdown.locationWeight;
    
    // Normalize to 1-10 scale
    return Math.min(Math.max(rawScore, 1), 10);
  }

  getPeakHourMultiplier(timing) {
    const hour = parseInt(timing.split(':')[0]);
    
    // Peak hours: 8-10 AM, 5-8 PM
    if ((hour >= 8 && hour <= 10) || (hour >= 17 && hour <= 20)) {
      return 1.8;
    }
    
    // Semi-peak: 7-8 AM, 4-5 PM, 8-9 PM
    if (hour === 7 || hour === 16 || hour === 21) {
      return 1.4;
    }
    
    return 1.0;
  }

  hashRoute(origin, destination) {
    const crypto = require('crypto');
    return crypto
      .createHash('sha256')
      .update(`${origin.toLowerCase()}:${destination.toLowerCase()}`)
      .digest('hex');
  }

  async generateAlternatives(input, currentScore) {
    const alternatives = [];

    // Public transport alternatives
    const publicTransport = await this.getPublicTransportOptions(input.origin, input.destination);
    alternatives.push(...publicTransport);

    // Carpooling option
    if (input.occupancy && input.occupancy < 3) {
      alternatives.push({
        type: 'carpooling',
        title: 'Carpooling',
        description: `Share rides with ${4 - input.occupancy} more people`,
        impactReduction: Math.round(((input.occupancy * 2) / input.occupancy - 1) * 100),
        timeDelta: '+5-10 minutes',
        costSavings: Math.round(250 / input.occupancy),
      });
    }

    // Off-peak timing
    if (this.getPeakHourMultiplier(input.timing) > 1.0) {
      alternatives.push({
        type: 'timing',
        title: 'Off-Peak Travel',
        description: 'Travel before 8 AM or after 9 PM',
        impactReduction: 40,
        timeDelta: 'Same or faster',
        costSavings: 0,
      });
    }

    // EV alternatives
    alternatives.push({
      type: 'electric',
      title: 'Electric Vehicle',
      description: 'Switch to an electric version of your vehicle',
      impactReduction: 25,
      timeDelta: 'Same',
      costSavings: 150,
    });

    return alternatives.slice(0, 4); // Limit to top 4 alternatives
  }

  async getPublicTransportOptions(origin, destination) {
    // Simplified public transport suggestions for Chennai
    return [
      {
        type: 'metro',
        title: 'Chennai Metro',
        description: 'Blue/Green line connection available',
        impactReduction: 85,
        timeDelta: '+10-15 minutes',
        costSavings: 800,
      },
      {
        type: 'bus',
        title: 'MTC Bus',
        description: 'Direct or 1-transfer route available',
        impactReduction: 80,
        timeDelta: '+15-20 minutes',
        costSavings: 900,
      },
    ];
  }

  async getCurrentPCUVersion() {
    return 'v202501';
  }

  async getEquivalentCommuters(score) {
    // Simulate equivalent commuters based on score
    return Math.round(2000 + (score * 500));
  }

  async calculatePotentialSavings(input, alternatives) {
    if (alternatives.length === 0) return 0;
    return Math.max(...alternatives.map(alt => alt.costSavings));
  }

  async cacheRouteData(routeHash, origin, destination, routeData) {
    const originHash = this.hashRoute(origin, '');
    const destinationHash = this.hashRoute(destination, '');

    try {
      await supabase.from('route_cache').upsert({
        route_hash: routeHash,
        origin_hash: originHash.substring(0, 32),
        destination_hash: destinationHash.substring(0, 32),
        polyline_encoded: routeData.overview_polyline || '',
        distance_km: routeData.distance,
        duration_minutes: routeData.duration,
        congestion_factor: routeData.congestionFactor,
        cbd_ratio: routeData.cbdRatio,
        data_source: routeData.dataSource,
        confidence_level: routeData.confidence?.level || 'C',
        has_live_traffic: routeData.hasLiveTraffic || false,
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours
      });
    } catch (error) {
      console.error('Failed to cache route data:', error);
      // Don't throw - caching failure shouldn't break the calculation
    }
  }

  getConfidenceFromCache(cached) {
    return {
      level: cached.confidence_level,
      description: this.getConfidenceDescription(cached.confidence_level, cached.data_source, cached.has_live_traffic),
    };
  }

  getConfidenceDescription(level, dataSource, hasLiveTraffic) {
    if (level === 'A' && dataSource === 'google' && hasLiveTraffic) {
      return 'Live traffic + Google routing';
    } else if (level === 'B') {
      return 'Live traffic + OSM routing';
    } else {
      return 'Historical data only';
    }
  }
}

module.exports = new ImpactCalculator();
```

### 8. Calculate Impact Route
```javascript
// server/routes/calculate.js
const express = require('express');
const rateLimit = require('express-rate-limit');
const { body, validationResult } = require('express-validator');
const impactCalculator = require('../services/impactCalculator');
const { trackAPIUsage } = require('../services/analytics');

const router = express.Router();

// Specific rate limit for calculation endpoint
const calculateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 20, // Limit each IP to 20 calculations per 15 minutes
  message: {
    error: 'Too many calculation requests. Please try again in a few minutes.',
  },
});

// Validation middleware
const validateCalculationInput = [
  body('transportMode').isIn(['personal', 'public', 'active', 'exploring']),
  body('origin').isString().isLength({ min: 1, max: 200 }),
  body('destination').isString().isLength({ min: 1, max: 200 }),
  body('timing').matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),
  body('frequency').isIn(['daily', 'weekly', 'occasional']),
  body('vehicleType').optional().isString(),
  body('occupancy').optional().isInt({ min: 1, max: 8 }),
];

router.post('/', calculateLimiter, validateCalculationInput, async (req, res) => {
  try {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Invalid input data',
        details: errors.array(),
      });
    }

    const startTime = Date.now();
    
    // Validate personal transport requirements
    if (req.body.transportMode === 'personal') {
      if (!req.body.vehicleType || !req.body.occupancy) {
        return res.status(400).json({
          error: 'Vehicle type and occupancy are required for personal transport',
        });
      }
    }

    // Calculate impact
    const result = await impactCalculator.calculate(req.body);
    const calculationTime = Date.now() - startTime;
    
    // Track API usage for cost monitoring
    await trackAPIUsage('calculate-impact', calculationTime, req.ip);
    
    // Log session for analytics (anonymized)
    await logCalculationSession(req.body, result, req.ip);
    
    res.json({
      success: true,
      data: result,
      meta: {
        calculationTime,
        timestamp: new Date().toISOString(),
        version: '1.0.0',
      },
    });
    
  } catch (error) {
    console.error('Calculation error:', error);
    
    res.status(500).json({
      error: 'Failed to calculate traffic impact',
      message: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',
      timestamp: new Date().toISOString(),
    });
  }
});

async function logCalculationSession(input, result, ip) {
  const { supabase } = require('../config/database');
  const crypto = require('crypto');
  
  const sessionHash = crypto.randomBytes(16).toString('hex');
  const ipHash = crypto.createHash('sha256').update(ip || 'unknown').digest('hex').substring(0, 16);
  
  try {
    await supabase.from('sessions').insert({
      session_hash: sessionHash,
      step_completed: 3,
      transport_mode: input.transportMode,
      vehicle_category: input.vehicleType ? 'personal' : input.transportMode,
      route_type: result.breakdown.locationWeight > 1.5 ? 'cbd' : 'suburban',
      impact_score: result.score,
      alternatives_shown: result.alternatives.length > 0,
      completed_at: new Date().toISOString(),
      ip_country: 'IN', // Assume Chennai users
    });
  } catch (error) {
    console.error('Session logging failed:', error);
    // Don't fail the main request if logging fails
  }
}

module.exports = router;
```

### 9. Health Check Endpoint
```javascript
// server/routes/health.js
const express = require('express');
const { supabase } = require('../config/database');
const { redis } = require('../config/redis');

const router = express.Router();

router.get('/', async (req, res) => {
  const startTime = Date.now();
  const health = {
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    services: {},
    performance: {},
  };

  try {
    // Test database connection
    const dbStart = Date.now();
    const { data, error } = await supabase
      .from('vehicles')
      .select('id')
      .limit(1);
    
    if (error) throw error;
    
    health.services.database = {
      status: 'operational',
      responseTime: Date.now() - dbStart,
    };

    // Test Redis connection
    const redisStart = Date.now();
    await redis.ping();
    
    health.services.redis = {
      status: 'operational', 
      responseTime: Date.now() - redisStart,
    };

    // Test Google Maps API (minimal request)
    const mapsStart = Date.now();
    try {
      const testResponse = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?address=Chennai&key=${process.env.GOOGLE_MAPS_API_KEY}`
      );
      const testData = await testResponse.json();
      
      health.services.googleMaps = {
        status: testData.status === 'OK' ? 'operational' : 'degraded',
        responseTime: Date.now() - mapsStart,
      };
    } catch (error) {
      health.services.googleMaps = {
        status: 'error',
        error: error.message,
      };
    }

    // Overall performance
    health.performance.totalResponseTime = Date.now() - startTime;
    health.performance.memoryUsage = process.memoryUsage();
    
    // Determine overall status
    const serviceStatuses = Object.values(health.services).map(s => s.status);
    if (serviceStatuses.includes('error')) {
      health.status = 'degraded';
      res.status(503);
    } else if (serviceStatuses.includes('degraded')) {
      health.status = 'degraded';
      res.status(200);
    }

    res.json(health);

  } catch (error) {
    console.error('Health check failed:', error);
    
    health.status = 'unhealthy';
    health.error = error.message;
    
    res.status(503).json(health);
  }
});

module.exports = router;
```

## Package.json Configuration

### 10. Frontend Package.json
```json
{
  "name": "chennai-traffic-calculator",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@googlemaps/js-api-loader": "^1.16.2",
    "@hookform/resolvers": "^3.3.2",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/google.maps": "^3.54.10",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.68",
    "@types/react": "^18.2.42",
    "@types/react-dom": "^18.2.17",
    "axios": "^1.6.2",
    "lucide-react": "^0.294.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.48.2",
    "react-router-dom": "^6.20.1",
    "react-scripts": "5.0.1",
    "recharts": "^2.8.0",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4",
    "zod": "^3.22.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "homepage": "."
}
```

### 11. Backend Package.json
```json
{
  "name": "chennai-traffic-calculator-server",
  "version": "1.0.0",
  "description": "Backend API for Chennai Traffic Impact Calculator",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.38.4",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "helmet": "^7.1.0",
    "ioredis": "^5.3.2",
    "morgan": "^1.10.0",
    "pg": "^8.11.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.2",
    "jest": "^29.7.0"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
```

## Replit Configuration

### 12. .replit Configuration
```bash
modules = ["nodejs-20"]

[deployment]
build = ["npm", "run", "build"]
run = ["npm", "start"]

[[ports]]
localPort = 3000
externalPort = 80

[[ports]]
localPort = 5000
externalPort = 3001
```

### 13. Environment Variables (Replit Secrets)
```bash
# Database
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_KEY=your_service_key

# APIs
GOOGLE_MAPS_API_KEY=your_google_maps_api_key

# Cache
REDIS_URL=redis://your-upstash-redis-url

# Analytics
REACT_APP_GA4_ID=G-XXXXXXXXXX
REACT_APP_CLARITY_ID=your_clarity_id

# Environment
NODE_ENV=production
PORT=5000
REACT_APP_API_URL=https://your-replit-url.repl.co/api
```

## UI/UX Style Guide

### Design Philosophy
Create an engaging, accessible, and culturally appropriate interface that uses subtle rewards and visual feedback to educate users about their traffic impact while maintaining serious underlying data integrity.

### Language and Localization

#### Bilingual Support
- **Primary Languages**: English and Tamil
- **Language Toggle**: Prominent switch in header, remembers user preference
- **Cultural Adaptation**: Tamil content adapted for local context, not just translation
- **Fallback Strategy**: English fallback for untranslated technical terms

```tsx
// Language Context Implementation
const LanguageContext = createContext();

const translations = {
  en: {
    "step1.title": "How do you usually commute?",
    "vehicle.personal": "Personal Vehicle",
    "vehicle.public": "Public Transport",
    "results.impact": "Your Traffic Impact",
  },
  ta: {
    "step1.title": "நீங்கள் எப்படி பயணம் செய்கிறீர்கள்?",
    "vehicle.personal": "தனிப்பட்ட வாகனம்",
    "vehicle.public": "பொது போக்குவரத்து",
    "results.impact": "உங்கள் போக்குவரத்து தாக்கம்",
  }
};
```

#### Content Tone and Voice
- **Professional yet Approachable**: "Let's see how your commute affects Chennai's traffic"
- **Encouraging**: "Great choice! Public transport is efficient for reducing traffic impact"
- **Educational without Preaching**: "Did you know? Your vehicle choice impacts 2,847 other commuters"
- **Local Context**: "During monsoon season, consider timing adjustments for safer travel"

### Accessibility Standards (WCAG 2.1 AA)

#### Visual Accessibility
```css
/* Color contrast ratios */
.text-primary { color: #1B4F72; } /* 7:1 ratio */
.text-secondary { color: #5D6D7E; } /* 4.5:1 ratio */
.bg-success { background: #27AE60; }
.bg-warning { background: #F39C12; }
.bg-error { background: #E74C3C; }

/* Focus indicators */
.focus-visible {
  outline: 3px solid #3498DB;
  outline-offset: 2px;
}

/* Text scaling */
.text-base { font-size: 16px; line-height: 1.6; }
.text-large { font-size: 18px; line-height: 1.6; }
.text-xl { font-size: 24px; line-height: 1.4; }
```

#### Interaction Accessibility
- **Keyboard Navigation**: Full functionality without mouse, logical tab order
- **Screen Reader Support**: Semantic HTML with proper ARIA labels
- **Touch Targets**: Minimum 44x44px touch areas for mobile
- **Motion Sensitivity**: Respect `prefers-reduced-motion` for animations

```tsx
// Accessible Button Component
function AccessibleButton({ children, onClick, disabled, size = "medium" }) {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`
        relative px-6 py-3 rounded-lg font-medium transition-all duration-200
        focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500
        min-h-[44px] min-w-[44px] text-left
        ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:transform hover:scale-105'}
      `}
      aria-label={typeof children === 'string' ? children : undefined}
    >
      {children}
    </button>
  );
}
```

### Visual Design System

#### Chennai-Themed Color Palette
```css
:root {
  /* Primary Chennai colors */
  --chennai-blue: #1B4F72; /* Metro blue */
  --chennai-orange: #E67E22; /* Warm climate inspired */
  --marina-blue: #3498DB; /* Marina beach */
  --kapaleeshwarar-gold: #F39C12; /* Temple gold */
  
  /* Traffic impact colors (subtle backgrounds) */
  --impact-minimal: #E8F5E8; /* Soft green glow */
  --impact-low: #D4EDDA; /* Light green */
  --impact-moderate: #F8F9FA; /* Neutral cream */
  --impact-high: #FFF3CD; /* Light amber */
  --impact-severe: #F8D7DA; /* Soft red glow */
  
  /* Functional colors */
  --success: #27AE60;
  --warning: #F39C12;
  --error: #E74C3C;
  --info: #3498DB;
  
  /* Neutral palette */
  --gray-50: #F8F9FA;
  --gray-100: #E9ECEF;
  --gray-200: #DEE2E6;
  --gray-300: #CED4DA;
  --gray-400: #6C757D;
  --gray-500: #495057;
  --gray-600: #343A40;
  --gray-700: #212529;
}
```

#### Dynamic Background System
```tsx
// Impact-based background component
function DynamicBackground({ impactScore, children }) {
  const getBackgroundClass = (score) => {
    if (score <= 2) return 'bg-gradient-to-br from-green-50 to-emerald-100';
    if (score <= 4) return 'bg-gradient-to-br from-green-50 to-lime-50';
    if (score <= 6) return 'bg-gradient-to-br from-gray-50 to-slate-50';
    if (score <= 8) return 'bg-gradient-to-br from-orange-50 to-amber-100';
    return 'bg-gradient-to-br from-red-50 to-rose-100';
  };

  return (
    <div className={`min-h-screen transition-all duration-1000 ${getBackgroundClass(impactScore)}`}>
      {children}
    </div>
  );
}
```

#### Typography System
```css
/* Font families */
.font-primary { font-family: 'Inter', system-ui, sans-serif; }
.font-tamil { font-family: 'Noto Sans Tamil', 'Inter', sans-serif; }

/* Heading scale */
.text-hero { font-size: 3rem; font-weight: 800; line-height: 1.1; } /* 48px */
.text-heading { font-size: 2rem; font-weight: 700; line-height: 1.2; } /* 32px */
.text-subheading { font-size: 1.5rem; font-weight: 600; line-height: 1.3; } /* 24px */
.text-body-large { font-size: 1.125rem; line-height: 1.6; } /* 18px */
.text-body { font-size: 1rem; line-height: 1.6; } /* 16px */
.text-small { font-size: 0.875rem; line-height: 1.5; } /* 14px */
.text-micro { font-size: 0.75rem; line-height: 1.4; } /* 12px */

/* Tamil-specific adjustments */
.text-tamil {
  font-size: 1.125rem;
  line-height: 1.7;
  letter-spacing: 0.01em;
}
```

### Interactive Components

#### Step Indicator with Progress
```tsx
function StepIndicator({ currentStep, totalSteps }) {
  return (
    <div className="flex items-center justify-center space-x-4 mb-8">
      {[...Array(totalSteps)].map((_, index) => {
        const stepNumber = index + 1;
        const isCompleted = stepNumber < currentStep;
        const isCurrent = stepNumber === currentStep;
        
        return (
          <div key={stepNumber} className="flex items-center">
            <div className={`
              relative flex items-center justify-center w-10 h-10 rounded-full
              transition-all duration-300 font-semibold text-sm
              ${isCurrent 
                ? 'bg-chennai-blue text-white shadow-lg ring-4 ring-blue-200' 
                : isCompleted 
                  ? 'bg-green-500 text-white'
                  : 'bg-gray-200 text-gray-500'
              }
            `}>
              {isCompleted ? (
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              ) : (
                stepNumber
              )}
              
              {isCurrent && (
                <div className="absolute -inset-1 rounded-full bg-blue-400 animate-ping opacity-20"></div>
              )}
            </div>
            
            {stepNumber < totalSteps && (
              <div className={`
                w-12 h-0.5 mx-2 transition-colors duration-300
                ${isCompleted ? 'bg-green-500' : 'bg-gray-200'}
              `} />
            )}
          </div>
        );
      })}
    </div>
  );
}
```

#### Vehicle Selection Cards
```tsx
function VehicleCard({ vehicle, isSelected, onSelect }) {
  return (
    <button
      onClick={() => onSelect(vehicle)}
      className={`
        group relative p-4 rounded-xl border-2 text-left transition-all duration-200
        hover:shadow-lg hover:scale-105 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500
        ${isSelected 
          ? 'border-chennai-blue bg-blue-50 shadow-md ring-2 ring-blue-200' 
          : 'border-gray-200 bg-white hover:border-gray-300'
        }
      `}
    >
      {/* Vehicle emoji/icon */}
      <div className="text-2xl mb-2">
        {vehicle.category === 'motorcycle' ? '🏍️' : vehicle.category === 'suv' ? '🚙' : '🚗'}
      </div>
      
      {/* Vehicle details */}
      <div className="font-semibold text-gray-900">
        {vehicle.make} {vehicle.model}
      </div>
      <div className="text-sm text-gray-500 mt-1">
        {vehicle.category.charAt(0).toUpperCase() + vehicle.category.slice(1)}
      </div>
      
      {/* Selection indicator */}
      {isSelected && (
        <div className="absolute top-3 right-3">
          <div className="w-5 h-5 bg-chennai-blue rounded-full flex items-center justify-center">
            <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      )}
      
      {/* Hover effect */}
      <div className={`
        absolute inset-0 rounded-xl transition-opacity duration-200
        ${isSelected ? 'opacity-0' : 'opacity-0 group-hover:opacity-5 bg-chennai-blue'}
      `} />
    </button>
  );
}
```

#### Impact Score Display
```tsx
function ImpactScoreDisplay({ score, maxScore = 10 }) {
  const percentage = (score / maxScore) * 100;
  const getScoreColor = (score) => {
    if (score <= 2) return 'text-green-600';
    if (score <= 4) return 'text-lime-600';
    if (score <= 6) return 'text-yellow-600';
    if (score <= 8) return 'text-orange-600';
    return 'text-red-600';
  };

  return (
    <div className="text-center">
      {/* Circular progress indicator */}
      <div className="relative w-32 h-32 mx-auto mb-4">
        <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 100 100">
          {/* Background circle */}
          <circle
            cx="50"
            cy="50"
            r="40"
            stroke="#E5E7EB"
            strokeWidth="8"
            fill="none"
          />
          {/* Progress circle */}
          <circle
            cx="50"
            cy="50"
            r="40"
            stroke="currentColor"
            strokeWidth="8"
            fill="none"
            strokeLinecap="round"
            strokeDasharray={`${percentage * 2.51} 251`}
            className={`transition-all duration-1000 ${getScoreColor(score)}`}
          />
        </svg>
        
        {/* Score text */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center">
            <div className={`text-3xl font-bold ${getScoreColor(score)}`}>
              {score.toFixed(1)}
            </div>
            <div className="text-sm text-gray-500">out of {maxScore}</div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

### Micro-Interactions and Animations

#### Button Press Animation
```css
.btn-press {
  transition: all 0.1s ease-in-out;
}

.btn-press:active {
  transform: scale(0.98);
}

.btn-press:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}
```

#### Success Celebrations
```tsx
function SuccessAnimation({ show, children }) {
  return (
    <div className={`
      transition-all duration-500 transform
      ${show 
        ? 'scale-100 opacity-100 animate-pulse-slow' 
        : 'scale-95 opacity-0'
      }
    `}>
      {children}
      {show && (
        <div className="absolute inset-0 rounded-lg bg-green-100 opacity-20 animate-ping"></div>
      )}
    </div>
  );
}
```

#### Loading States
```tsx
function LoadingSpinner({ message = "Calculating..." }) {
  return (
    <div className="flex flex-col items-center justify-center py-8">
      <div className="relative">
        <div className="w-8 h-8 border-4 border-blue-200 rounded-full animate-spin"></div>
        <div className="absolute top-0 left-0 w-8 h-8 border-4 border-transparent border-t-blue-600 rounded-full animate-spin"></div>
      </div>
      <p className="mt-4 text-gray-600 animate-pulse">{message}</p>
    </div>
  );
}
```

### Gamification and Rewards

#### Achievement Badges
```tsx
const achievements = {
  publicTransportHero: {
    icon: '🚌',
    title: 'Public Transport Hero',
    description: 'Chose sustainable transport!',
    color: 'bg-green-100 text-green-800',
  },
  carpoolChampion: {
    icon: '👥',
    title: 'Carpool Champion', 
    description: 'Maximized vehicle occupancy!',
    color: 'bg-blue-100 text-blue-800',
  },
  ecoWarrior: {
    icon: '🌱',
    title: 'Eco Warrior',
    description: 'Minimal traffic impact achieved!',
    color: 'bg-emerald-100 text-emerald-800',
  },
};

function AchievementBadge({ type, show }) {
  const achievement = achievements[type];
  
  return (
    <div className={`
      inline-flex items-center px-3 py-2 rounded-full text-sm font-medium
      transition-all duration-500 transform
      ${show ? 'scale-100 opacity-100' : 'scale-0 opacity-0'}
      ${achievement.color}
    `}>
      <span className="text-lg mr-2">{achievement.icon}</span>
      <div>
        <div className="font-semibold">{achievement.title}</div>
        <div className="text-xs opacity-80">{achievement.description}</div>
      </div>
    </div>
  );
}
```

#### Progress Celebrations
```tsx
function CompletionCelebration({ step, onContinue }) {
  return (
    <div className="text-center py-6">
      <div className="text-4xl mb-4 animate-bounce">🎉</div>
      <h3 className="text-xl font-semibold text-gray-900 mb-2">
        Step {step} Complete!
      </h3>
      <p className="text-gray-600 mb-6">
        {step === 1 && "Great start! Now let's see your route."}
        {step === 2 && "Perfect! Time to calculate your impact."}
        {step === 3 && "Analysis complete! Check out your results."}
      </p>
      <button
        onClick={onContinue}
        className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors duration-200"
      >
        Continue →
      </button>
    </div>
  );
}
```

### Cultural Sensitivity and Local Context

#### Chennai-Specific Elements
```tsx
const chennaiLandmarks = [
  { name: 'Marina Beach', emoji: '🏖️' },
  { name: 'Kapaleeshwarar Temple', emoji: '🕌' },
  { name: 'Express Avenue', emoji: '🛍️' },
  { name: 'IIT Madras', emoji: '🎓' },
  { name: 'Anna Salai', emoji: '🛣️' },
];

const localTransport = [
  { type: 'Chennai Metro', icon: '🚇', color: 'blue' },
  { type: 'MTC Bus', icon: '🚌', color: 'green' },
  { type: 'Auto Rickshaw', icon: '🛺', color: 'yellow' },
  { type: 'Share Auto', icon: '🚐', color: 'orange' },
];
```

#### Age-Inclusive Design
```css
/* Enhanced readability for older users */
.text-senior {
  font-size: 1.125rem;
  line-height: 1.8;
  letter-spacing: 0.025em;
}

/* Larger touch targets for accessibility */
.touch-friendly {
  min-height: 48px;
  min-width: 48px;
  padding: 12px 16px;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .high-contrast {
    border: 2px solid currentColor;
    background: white;
    color: black;
  }
}
```

### Error Handling and User Feedback

#### Error States
```tsx
function ErrorMessage({ error, onRetry, onDismiss }) {
  return (
    <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
      <div className="flex items-start">
        <div className="flex-shrink-0">
          <svg className="w-6 h-6 text-red-600" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
          </svg>
        </div>
        <div className="ml-3 flex-1">
          <h4 className="text-sm font-medium text-red-800">
            Something went wrong
          </h4>
          <p className="mt-1 text-sm text-red-700">{error}</p>
          <div className="mt-3 flex space-x-3">
            {onRetry && (
              <button
                onClick={onRetry}
                className="text-sm bg-red-100 text-red-800 px-3 py-2 rounded-md hover:bg-red-200"
              >
                Try Again
              </button>
            )}
            <button
              onClick={onDismiss}
              className="text-sm text-red-600 hover:text-red-800"
            >
              Dismiss
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
```

### Performance Considerations

#### Lazy Loading Components
```tsx
import { lazy, Suspense } from 'react';

const GoogleMapsComponent = lazy(() => import('./GoogleMapsComponent'));
const ResultsChart = lazy(() => import('./ResultsChart'));

function App() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <GoogleMapsComponent />
      <ResultsChart />
    </Suspense>
  );
}
```

#### Image Optimization
```tsx
function OptimizedImage({ src, alt, className }) {
  return (
    <img
      src={src}
      alt={alt}
      className={className}
      loading="lazy"
      decoding="async"
      onError={(e) => {
        e.target.src = '/fallback-image.jpg';
      }}
    />
  );
}
```

## Deployment Instructions

### Phase 1 Setup (Week 1)
1. **Create React App**: `npx create-react-app chennai-traffic-calculator --template typescript`
2. **Set up Supabase**: Create project, run SQL schema from earlier section
3. **Configure Replit**: Add environment variables, set up build commands
4. **Install dependencies**: Both frontend and backend packages
5. **Basic UI**: Implement 3-step calculator flow with style guide

### Phase 2 Core Features (Week 2)
1. **Backend API**: Express server with all endpoints
2. **Google Maps**: Integration with autocomplete and routing
3. **Impact calculation**: PCU-based scoring system
4. **Caching**: Route and vehicle data caching
5. **Analytics**: GA4 and Clarity integration with privacy controls

### Success Metrics
- **Completion Rate**: Target 60% from step 1 to results
- **Performance**: <3 seconds initial load, >90 Lighthouse score
- **API Costs**: <$50/month with intelligent caching
- **User Satisfaction**: >4.0/5.0 average rating
- **Accessibility**: WCAG 2.1 AA compliance
- **Uptime**: 99%+ availability

This React + Express.js implementation with comprehensive UI/UX style guide achieves all the same goals while using Replit's supported technology stack. The design system ensures cultural appropriateness, accessibility, and optimal user engagement for Chennai's diverse user base.