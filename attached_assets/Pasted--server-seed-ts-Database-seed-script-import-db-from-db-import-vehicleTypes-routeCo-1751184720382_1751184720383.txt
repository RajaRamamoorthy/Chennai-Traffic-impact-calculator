// server/seed.ts - Database seed script
import { db } from './db';
import { vehicleTypes, routeCongestion } from '@shared/schema';

const seedVehicleTypes = [
  // Cars
  {
    name: 'Maruti Swift (Petrol)',
    category: 'car',
    emissionFactor: '0.142', // kg CO2/km
    fuelCostPerKm: '6.50',   // ₹/km
    avgSpeedKmh: 25,
    baseImpactScore: 45,
    maxOccupancy: 5
  },
  {
    name: 'Hyundai i20 (Petrol)',
    category: 'car',
    emissionFactor: '0.148',
    fuelCostPerKm: '7.20',
    avgSpeedKmh: 25,
    baseImpactScore: 47,
    maxOccupancy: 5
  },
  {
    name: 'Honda City (Petrol)',
    category: 'car',
    emissionFactor: '0.155',
    fuelCostPerKm: '8.50',
    avgSpeedKmh: 28,
    baseImpactScore: 50,
    maxOccupancy: 5
  },
  {
    name: 'Toyota Innova (Diesel)',
    category: 'car',
    emissionFactor: '0.168',
    fuelCostPerKm: '9.20',
    avgSpeedKmh: 30,
    baseImpactScore: 55,
    maxOccupancy: 7
  },
  {
    name: 'Mahindra XUV500 (Diesel)',
    category: 'car',
    emissionFactor: '0.185',
    fuelCostPerKm: '10.50',
    avgSpeedKmh: 25,
    baseImpactScore: 60,
    maxOccupancy: 7
  },
  {
    name: 'Tata Nexon EV',
    category: 'car',
    emissionFactor: '0.045', // Lower due to electric
    fuelCostPerKm: '2.80',   // Lower operating cost
    avgSpeedKmh: 25,
    baseImpactScore: 25,
    maxOccupancy: 5
  },
  
  // Two-wheelers
  {
    name: 'Honda Activa (Petrol)',
    category: 'bike',
    emissionFactor: '0.062',
    fuelCostPerKm: '2.10',
    avgSpeedKmh: 30,
    baseImpactScore: 25,
    maxOccupancy: 2
  },
  {
    name: 'Bajaj Pulsar 150 (Petrol)',
    category: 'bike',
    emissionFactor: '0.055',
    fuelCostPerKm: '2.30',
    avgSpeedKmh: 35,
    baseImpactScore: 22,
    maxOccupancy: 2
  },
  {
    name: 'TVS Jupiter (Petrol)',
    category: 'bike',
    emissionFactor: '0.058',
    fuelCostPerKm: '2.00',
    avgSpeedKmh: 32,
    baseImpactScore: 23,
    maxOccupancy: 2
  },
  {
    name: 'Ather 450X (Electric)',
    category: 'bike',
    emissionFactor: '0.018',
    fuelCostPerKm: '0.80',
    avgSpeedKmh: 35,
    baseImpactScore: 12,
    maxOccupancy: 2
  },
  {
    name: 'Hero Electric Optima',
    category: 'bike',
    emissionFactor: '0.020',
    fuelCostPerKm: '0.70',
    avgSpeedKmh: 30,
    baseImpactScore: 15,
    maxOccupancy: 2
  },

  // Public Transport
  {
    name: 'Chennai Metro',
    category: 'metro',
    emissionFactor: '0.025',
    fuelCostPerKm: '2.50',
    avgSpeedKmh: 35,
    baseImpactScore: 15,
    maxOccupancy: 100
  },
  {
    name: 'MTC Bus',
    category: 'bus',
    emissionFactor: '0.045',
    fuelCostPerKm: '1.50',
    avgSpeedKmh: 20,
    baseImpactScore: 20,
    maxOccupancy: 60
  },
  {
    name: 'Auto Rickshaw',
    category: 'auto',
    emissionFactor: '0.075',
    fuelCostPerKm: '12.00',
    avgSpeedKmh: 25,
    baseImpactScore: 35,
    maxOccupancy: 3
  },
  {
    name: 'Share Auto',
    category: 'auto',
    emissionFactor: '0.038', // Shared impact
    fuelCostPerKm: '8.00',
    avgSpeedKmh: 22,
    baseImpactScore: 18,
    maxOccupancy: 8
  },

  // Active Transport
  {
    name: 'Walking',
    category: 'walking',
    emissionFactor: '0.000',
    fuelCostPerKm: '0.00',
    avgSpeedKmh: 5,
    baseImpactScore: 5,
    maxOccupancy: 1
  },
  {
    name: 'Cycling',
    category: 'walking',
    emissionFactor: '0.000',
    fuelCostPerKm: '0.10', // Maintenance cost
    avgSpeedKmh: 15,
    baseImpactScore: 5,
    maxOccupancy: 1
  }
];

const seedRouteCongestion = [
  // High Traffic Areas
  {
    areaName: 'Anna Salai',
    lat: '13.0569',
    lng: '80.2485',
    congestionFactor: '2.2',
    peakHourMultiplier: '2.8',
    isHighTrafficZone: true
  },
  {
    areaName: 'T. Nagar',
    lat: '13.0418',
    lng: '80.2341',
    congestionFactor: '2.5',
    peakHourMultiplier: '3.0',
    isHighTrafficZone: true
  },
  {
    areaName: 'OMR IT Corridor',
    lat: '12.9165',
    lng: '80.2284',
    congestionFactor: '2.0',
    peakHourMultiplier: '2.5',
    isHighTrafficZone: true
  },
  {
    areaName: 'GST Road',
    lat: '12.9716',
    lng: '80.1946',
    congestionFactor: '1.8',
    peakHourMultiplier: '2.3',
    isHighTrafficZone: true
  },
  {
    areaName: 'Porur',
    lat: '13.0378',
    lng: '80.1585',
    congestionFactor: '2.0',
    peakHourMultiplier: '2.6',
    isHighTrafficZone: true
  },

  // Medium Traffic Areas
  {
    areaName: 'Adyar',
    lat: '13.0067',
    lng: '80.2572',
    congestionFactor: '1.5',
    peakHourMultiplier: '2.0',
    isHighTrafficZone: false
  },
  {
    areaName: 'Anna Nagar',
    lat: '13.0850',
    lng: '80.2101',
    congestionFactor: '1.6',
    peakHourMultiplier: '2.1',
    isHighTrafficZone: false
  },
  {
    areaName: 'Velachery',
    lat: '12.9810',
    lng: '80.2209',
    congestionFactor: '1.4',
    peakHourMultiplier: '1.8',
    isHighTrafficZone: false
  },

  // Low Traffic Areas
  {
    areaName: 'ECR',
    lat: '12.8779',
    lng: '80.2374',
    congestionFactor: '1.2',
    peakHourMultiplier: '1.4',
    isHighTrafficZone: false
  },
  {
    areaName: 'Outer Ring Road',
    lat: '13.0475',
    lng: '80.1755',
    congestionFactor: '1.3',
    peakHourMultiplier: '1.6',
    isHighTrafficZone: false
  }
];

async function seedDatabase() {
  try {
    console.log('🌱 Starting database seeding...');
    
    // Clear existing data
    console.log('🧹 Clearing existing vehicle types...');
    await db.delete(vehicleTypes);
    
    console.log('🧹 Clearing existing route congestion data...');
    await db.delete(routeCongestion);

    // Seed vehicle types
    console.log('🚗 Seeding vehicle types...');
    for (const vehicle of seedVehicleTypes) {
      await db.insert(vehicleTypes).values(vehicle);
    }
    console.log(`✅ Inserted ${seedVehicleTypes.length} vehicle types`);

    // Seed route congestion data
    console.log('🛣️ Seeding route congestion data...');
    for (const area of seedRouteCongestion) {
      await db.insert(routeCongestion).values(area);
    }
    console.log(`✅ Inserted ${seedRouteCongestion.length} congestion areas`);

    console.log('🎉 Database seeding completed successfully!');
    
    // Display summary
    console.log('\n📊 Seeded Data Summary:');
    console.log(`   Cars: ${seedVehicleTypes.filter(v => v.category === 'car').length}`);
    console.log(`   Bikes: ${seedVehicleTypes.filter(v => v.category === 'bike').length}`);
    console.log(`   Public Transport: ${seedVehicleTypes.filter(v => ['metro', 'bus', 'auto'].includes(v.category)).length}`);
    console.log(`   Active Transport: ${seedVehicleTypes.filter(v => v.category === 'walking').length}`);
    console.log(`   Traffic Areas: ${seedRouteCongestion.length}`);
    
  } catch (error) {
    console.error('❌ Error seeding database:', error);
    throw error;
  }
}

export { seedDatabase };

// Run seeding if this file is executed directly
if (require.main === module) {
  seedDatabase()
    .then(() => {
      console.log('Database seeding completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Database seeding failed:', error);
      process.exit(1);
    });
}